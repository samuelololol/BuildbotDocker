# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *
import os


#GIT_REPO_URL='https://github.com/samuelololol/mydockerfiles.git'
GIT_REPO_URL = os.environ['GIT_REPO_URL']
PROJECT_TITLE = os.environ['PROJECT_TITLE']
PROJECT_URL = os.environ['PROJECT_URL']


# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = [buildslave.BuildSlave("example-slave", "pass")]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        GIT_REPO_URL,
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["runtests"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["runtests"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

factory = util.BuildFactory()
build_dir_path='/app/runtests/build'
# check out the source
factory.addStep(steps.Git(repourl=GIT_REPO_URL, mode='incremental'))
# samuel
#factory.addStep(steps.ShellCommand(env={'GIT_PAGER':''}, command=["git", "log", "-n 10"]))
# run the tests (note that this will require that 'trial' is installed)
#factory.addStep(steps.ShellCommand(command=["trial", "pyflakes"]))
factory.addStep(steps.ShellCommand(command=["echo", "hello world"]))
factory.addStep(steps.ShellCommand(
    name="check python volume",
    description="checking",
    descriptionDone="checked",
    command=["python", "/app/runtests/build/test/check_and_create_pyvolume.py"]))

factory.addStep(steps.ShellSequence(commands=[
    util.ShellArg(command=["docker-compose ", "build"], workdir=build_dir_path+'/test'),
    util.ShellArg(command=["docker-compose ", "up", "-d"], workdir=build_dir_path+'/test'),
    ]))


c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="runtests",
      slavenames=["example-slave"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("buildbot","buildbot")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

#samuel
c['title'] = PROJECT_TITLE #"Pyflakes"
c['titleURL'] = PROJECT_URL #"https://launchpad.net/pyflakes"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
