# -*- python -*-
# ex: set syntax=python:
from buildbot.buildslave import BuildSlave
from buildbot.changes.gitpoller import GitPoller
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.forcesched import ChoiceStringParameter
from buildbot.schedulers.forcesched import StringParameter
from buildbot.schedulers.forcesched import FixedParameter
from buildbot.schedulers.forcesched import BooleanParameter
from buildbot.changes import filter
from buildbot.scheduler import Scheduler, Periodic
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
import os

SLAVE_NAME = ''
SLAVE_PASS = ''

GIT_REPO = 'https://github.com/samuelololol/BuildbotDocker.git'
GIT_BRANCH= ''

c = BuildmasterConfig = {}
####### BUILDSLAVES
c['slaves'] = [BuildSlave(SLAVE_NAME, SLAVE_PASS)]
c['protocols'] = {'pb': {'port': 9989}}
c['change_source'] = []
c['change_source'].append(GitPoller(GIT_REPO,
                                workdir='gitpoller-workdir',
                                branch=GIT_BRANCH,
	                            gitbin='/usr/bin/git',
                                pollinterval=10))
####### SCHEDULERS
c['schedulers'] = []
#every 60 secs.
#c['schedulers'].append(Periodic("every 1 minutes", ["runtests"], 60))
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch=GIT_BRANCH),
                            treeStableTimer=None,
                            builderNames=["runtests"]))
####### BUILDERS
factory = BuildFactory()
factory.addStep(Git(repourl=GIT_REPO, mode='incremental', branch=GIT_BRANCH))
#for python development
#factory.addStep(ShellCommand(command=["/var/lib/buildmaster/bin/create_env.sh", "venv"]))
#factory.addStep(ShellCommand(command=["/var/lib/buildmaster/bin/project_bin/setup.sh"]))
#factory.addStep(ShellCommand(command=["/var/lib/buildmaster/bin/project_bin/use_venv.sh", "py.test", "-s", "<test>/<file>/<in>/<git>/<repo>"]))
#factory.addStep(ShellCommand(command=["/var/lib/buildmaster/bin/remove_ssh_agent.sh"]))

from buildbot.config import BuilderConfig
c['builders'] = []
c['builders'].append(
    BuilderConfig(name="runtests",
      slavenames=[SLAVE_NAME],
      factory=factory))

####### STATUS TARGETS
c['status'] = []
from buildbot.status import html
from buildbot.status.web import authz, auth
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("pyflakes","pyflakes")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))
c['title'] = "BuildbotDocker"
c['titleURL'] = "https://github.com/samuelololol/BuildbotDocker"
c['buildbotURL'] = "http://localhost:8010/"
c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

